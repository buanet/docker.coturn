# Github action to build image (Tag: latest)
name: Build Image (latest)

on:
  release:
    types: [prereleased]
  workflow_dispatch:

jobs:
  create-build-number:
    runs-on: ubuntu-latest
    outputs:
      build_number: ${{ steps.generate-build-number.outputs.build_number }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4.1.7
        with:
          repository: 'buanet/docker.coturn'
          token: ${{ secrets.ACTIONS_PAT }}
          ref: main

      - name: Generate build number
        id: generate-build-number
        run: |
          BUILD="$(date +"%Y%m%d.%H%M%S")"
          echo "$BUILD" > .github/dependencies/.latest-build
          echo "build_number=$BUILD" >> $GITHUB_ENV
          echo "build_number=$BUILD" >> $GITHUB_OUTPUT
          echo "[LOG] Buildnumber: $BUILD"

      - name: Commit latest build version
        run: |
          git config --global user.name 'buanet'
          git config --global user.email 'info@buanet.de'
          git commit -am "new build"
          git push origin HEAD:main

  build-latest-armv7:
    name: Build latest armv7 image
    needs: [create-build-number]
    runs-on: ubuntu-latest
    steps:
      - name: Fetch latest pre-release tag
        run: |
          LATESTPRERELEASE="$(curl -sL https://api.github.com/repos/buanet/docker.coturn/releases | jq -r '.[] | select(.prerelease) | .tag_name' | head -n 1)"
          echo "Latest pre-release tag : $LATESTPRERELEASE"
          echo "RELEASE_TAG=$LATESTPRERELEASE" >> $GITHUB_ENV

      - name: Checkout repo
        uses: actions/checkout@v4.1.7
        with:
          repository: 'buanet/docker.coturn'
          ref: ${{ env.RELEASE_TAG }}

      - name: Set job variables
        run: |
          VERSION="$(cat .VERSION)"
          MAJORVERSION="$(cat .VERSION | cut -c 1-2 | sed -r 's#^(.{0})#\1latest-#')"
          BUILD="${{ needs.create-build-number.outputs.build_number }}"
          # Log output and export as Github environment variable
          echo "[LOG] Image Version: latest-$VERSION"
          echo "version=latest-$VERSION" >> $GITHUB_ENV
          echo "[LOG] Major Image Version: $MAJORVERSION"
          echo "majorversion=$MAJORVERSION" >> $GITHUB_ENV
          echo "[LOG] Buildnumber: $BUILD"
          echo "build=$BUILD" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.2.0

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3.6.1

      - name: Login to DockerHub (buanet)
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ secrets.PACKAGES_USER }}
          password: ${{ secrets.PACKAGES_PASS }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6.6.1
        with:
          context: ./
          file: ./Dockerfile
          push: true
          platforms: linux/arm/v7
          tags: |
            buanet/coturn:${{ env.version }}-build.${{ env.build }}-armv7,
            ghcr.io/buanet/coturn:${{ env.version }}-build.${{ env.build }}-armv7,

  build-latest-arm64v8:
    name: Build latest armv64v8 image
    needs: [create-build-number]
    runs-on: ubuntu-latest
    steps:
      - name: Fetch latest pre-release tag
        run: |
          LATESTPRERELEASE="$(curl -sL https://api.github.com/repos/buanet/docker.coturn/releases | jq -r '.[] | select(.prerelease) | .tag_name' | head -n 1)"
          echo "Latest pre-release tag : $LATESTPRERELEASE"
          echo "RELEASE_TAG=$LATESTPRERELEASE" >> $GITHUB_ENV

      - name: Checkout repo
        uses: actions/checkout@v4.1.7
        with:
          repository: 'buanet/docker.coturn'
          ref: ${{ env.RELEASE_TAG }}

      - name: Set job variables
        run: |
          VERSION="$(cat .VERSION)"
          MAJORVERSION="$(cat .VERSION | cut -c 1-2 | sed -r 's#^(.{0})#\1latest-#')"
          BUILD="${{ needs.create-build-number.outputs.build_number }}"
          # Log output and export as Github environment variable
          echo "[LOG] Image Version: latest-$VERSION"
          echo "version=latest-$VERSION" >> $GITHUB_ENV
          echo "[LOG] Major Image Version: $MAJORVERSION"
          echo "majorversion=$MAJORVERSION" >> $GITHUB_ENV
          echo "[LOG] Buildnumber: $BUILD"
          echo "build=$BUILD" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.2.0

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3.6.1

      - name: Login to DockerHub (buanet)
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ secrets.PACKAGES_USER }}
          password: ${{ secrets.PACKAGES_PASS }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6.6.1
        with:
          context: ./
          file: ./Dockerfile
          push: true
          platforms: linux/arm64/v8
          tags: |
            buanet/coturn:${{ env.version }}-build.${{ env.build }}-arm64v8,
            ghcr.io/buanet/coturn:${{ env.version }}-build.${{ env.build }}-arm64v8,

  build-latest-amd64:
    name: Build latest amd64 image
    needs: [create-build-number]
    runs-on: ubuntu-latest
    steps:
      - name: Fetch latest pre-release tag
        run: |
          LATESTPRERELEASE="$(curl -sL https://api.github.com/repos/buanet/docker.coturn/releases | jq -r '.[] | select(.prerelease) | .tag_name' | head -n 1)"
          echo "Latest pre-release tag : $LATESTPRERELEASE"
          echo "RELEASE_TAG=$LATESTPRERELEASE" >> $GITHUB_ENV

      - name: Checkout repo
        uses: actions/checkout@v4.1.7
        with:
          repository: 'buanet/docker.coturn'
          ref: ${{ env.RELEASE_TAG }}

      - name: Set job variables
        run: |
          VERSION="$(cat .VERSION)"
          MAJORVERSION="$(cat .VERSION | cut -c 1-2 | sed -r 's#^(.{0})#\1latest-#')"
          BUILD="${{ needs.create-build-number.outputs.build_number }}"
          # Log output and export as Github environment variable
          echo "[LOG] Image Version: latest-$VERSION"
          echo "version=latest-$VERSION" >> $GITHUB_ENV
          echo "[LOG] Major Image Version: $MAJORVERSION"
          echo "majorversion=$MAJORVERSION" >> $GITHUB_ENV
          echo "[LOG] Buildnumber: $BUILD"
          echo "build=$BUILD" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3.6.1

      - name: Login to DockerHub (buanet)
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ secrets.PACKAGES_USER }}
          password: ${{ secrets.PACKAGES_PASS }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6.6.1
        with:
          context: ./
          file: ./Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            buanet/coturn:${{ env.version }}-build.${{ env.build }}-amd64,
            ghcr.io/buanet/coturn:${{ env.version }}-build.${{ env.build }}-amd64,

  create-multiarch-image:
    runs-on: ubuntu-latest
    needs: [build-latest-armv7, build-latest-arm64v8, build-latest-amd64, create-build-number]
    steps:
      - name: Fetch latest pre-release tag
        run: |
          LATESTPRERELEASE="$(curl -sL https://api.github.com/repos/buanet/docker.coturn/releases | jq -r '.[] | select(.prerelease) | .tag_name' | head -n 1)"
          echo "Latest pre-release tag : $LATESTPRERELEASE"
          echo "RELEASE_TAG=$LATESTPRERELEASE" >> $GITHUB_ENV

      - name: Checkout repo
        uses: actions/checkout@v4.1.7
        with:
          repository: 'buanet/docker.coturn'
          ref: ${{ env.RELEASE_TAG }}

      - name: Set job variables
        run: |
          VERSION="$(cat .VERSION)"
          MAJORVERSION="$(cat .VERSION | cut -c 1-2 | sed -r 's#^(.{0})#\1latest-#')"
          BUILD="${{ needs.create-build-number.outputs.build_number }}"
          # Log output and export as Github environment variable
          echo "[LOG] Image Version: latest-$VERSION"
          echo "version=latest-$VERSION" >> $GITHUB_ENV
          echo "[LOG] Major Image Version: $MAJORVERSION"
          echo "majorversion=$MAJORVERSION" >> $GITHUB_ENV
          echo "[LOG] Buildnumber: $BUILD"
          echo "build=$BUILD" >> $GITHUB_ENV

      - name: Login to DockerHub (buanet)
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ secrets.PACKAGES_USER }}
          password: ${{ secrets.PACKAGES_PASS }}

      - name: Create and push multi-platform image
        run: |
          docker buildx imagetools create -t buanet/coturn:latest buanet/coturn:${{ env.version }}-build.${{ env.build }}-armv7 buanet/coturn:${{ env.version }}-build.${{ env.build }}-arm64v8 buanet/coturn:${{ env.version }}-build.${{ env.build }}-amd64
          docker buildx imagetools create -t ghcr.io/buanet/coturn:latest ghcr.io/buanet/coturn:${{ env.version }}-build.${{ env.build }}-armv7 ghcr.io/buanet/coturn:${{ env.version }}-build.${{ env.build }}-arm64v8 ghcr.io/buanet/coturn:${{ env.version }}-build.${{ env.build }}-amd64
          docker buildx imagetools create -t buanet/coturn:${{ env.majorversion }} buanet/coturn:${{ env.version }}-build.${{ env.build }}-armv7 buanet/coturn:${{ env.version }}-build.${{ env.build }}-arm64v8 buanet/coturn:${{ env.version }}-build.${{ env.build }}-amd64
          docker buildx imagetools create -t ghcr.io/buanet/coturn:${{ env.majorversion }} ghcr.io/buanet/coturn:${{ env.version }}-build.${{ env.build }}-armv7 ghcr.io/buanet/coturn:${{ env.version }}-build.${{ env.build }}-arm64v8 ghcr.io/buanet/coturn:${{ env.version }}-build.${{ env.build }}-amd64
          docker buildx imagetools create -t buanet/coturn:${{ env.version }} buanet/coturn:${{ env.version }}-build.${{ env.build }}-armv7 buanet/coturn:${{ env.version }}-build.${{ env.build }}-arm64v8 buanet/coturn:${{ env.version }}-build.${{ env.build }}-amd64
          docker buildx imagetools create -t ghcr.io/buanet/coturn:${{ env.version }} ghcr.io/buanet/coturn:${{ env.version }}-build.${{ env.build }}-armv7 ghcr.io/buanet/coturn:${{ env.version }}-build.${{ env.build }}-arm64v8 ghcr.io/buanet/coturn:${{ env.version }}-build.${{ env.build }}-amd64
          docker buildx imagetools create -t buanet/coturn:${{ env.version }}-build.${{ env.build }} buanet/coturn:${{ env.version }}-build.${{ env.build }}-armv7 buanet/coturn:${{ env.version }}-build.${{ env.build }}-arm64v8 buanet/coturn:${{ env.version }}-build.${{ env.build }}-amd64
          docker buildx imagetools create -t ghcr.io/buanet/coturn:${{ env.version }}-build.${{ env.build }} ghcr.io/buanet/coturn:${{ env.version }}-build.${{ env.build }}-armv7 ghcr.io/buanet/coturn:${{ env.version }}-build.${{ env.build }}-arm64v8 ghcr.io/buanet/coturn:${{ env.version }}-build.${{ env.build }}-amd64
