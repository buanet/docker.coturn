# Github action to create a new pre-release
name: Create New Pre-Release

on:
  workflow_dispatch:

jobs:
  create-new-pre-release:
    name: Create and publish new pre-release
    runs-on: ubuntu-latest
    steps:
      - name: Fetch stable release tag
        run: |
          set -e
          STABLERELEASE=$(curl -sL https://api.github.com/repos/buanet/docker.coturn/releases/latest | jq -r '.tag_name')
          if [ -z "$STABLERELEASE" ]; then echo "[ERROR] Could not fetch stable release tag!" && exit 1; fi
          echo "[LOG] Stable release tag: $STABLERELEASE"
          echo "RELEASE_TAG=$STABLERELEASE" >> $GITHUB_ENV

      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          repository: 'buanet/docker.coturn'
          ref: ${{ env.RELEASE_TAG }}
          token: ${{ secrets.ACTIONS_PAT }}

      - name: Get latest coturn release for base image
        run: |
          set -e
          git fetch origin main
          git checkout origin/main -- .github/dependencies/.latest-coturn-release
          BASE_IMAGE_VERSION=$(cat .github/dependencies/.latest-coturn-release)
          if [ -z "$BASE_IMAGE_VERSION" ]; then echo "[ERROR] Base image version is empty!" && exit 1; fi
          echo "[LOG] Base image version: $BASE_IMAGE_VERSION"
          echo "base_image_version=$BASE_IMAGE_VERSION" >> $GITHUB_ENV

      - name: Count existing pre-releases
        run: |
          set -e
          EXISTING_LATEST_VERSIONS=$(gh release list --json tagName --jq "[.[].tagName | select(startswith(\"${{ env.RELEASE_TAG }}-latest.\"))]")
          if [ "$EXISTING_LATEST_VERSIONS" == "[]" ]; then
            NEW_LATEST_VERSION=1
          else
            HIGHEST_LATEST=$(echo "$EXISTING_LATEST_VERSIONS" | jq -r 'map(sub(".*-latest."; "")) | map(tonumber) | max')
            NEW_LATEST_VERSION=$((HIGHEST_LATEST + 1))
          fi
          NEW_TAG="${{ env.RELEASE_TAG }}-latest.${NEW_LATEST_VERSION}"
          echo "[LOG] New pre-release tag: $NEW_TAG"
          echo "new_tag=$NEW_TAG" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.ACTIONS_PAT }}

      - name: Modify Dockerfile
        run: |
          set -e
          sed -i "s|FROM .*$|FROM coturn/coturn:${{ env.base_image_version }}|" Dockerfile
          echo "[LOG] Dockerfile updated successfully."

      - name: Push new pre-release tag
        run: |
          set -e
          git config --global user.name 'buanet'
          git config --global user.email 'info@buanet.de'
          git tag ${{ env.new_tag }}
          git push origin ${{ env.new_tag }}
          echo "[LOG] Pushed new tag: ${{ env.new_tag }}"

      - name: Create GitHub pre-release
        run: |
          set -e
          # Write release notes to a temporary file
          echo "### Pre-Release Notes" > release-notes.md
          echo "" >> release-notes.md
          echo "This pre-release was **automatically generated** and includes the latest updates:" >> release-notes.md
          echo "" >> release-notes.md
          echo "- **Base Release:** `${{ env.RELEASE_TAG }}`" >> release-notes.md
          echo "- **Coturn Version:** `${{ env.base_image_version }}`" >> release-notes.md
          echo "" >> release-notes.md
          echo "This release is used to generate the **Docker image tagged as \`latest\`**." >> release-notes.md
          echo "The base image is automatically updated to the most recent Coturn version, ensuring the inclusion of the latest features and security fixes." >> release-notes.md
          echo "" >> release-notes.md
          echo "While this provides up-to-date improvements, **breaking changes in Coturn** may cause compatibility issues with this Docker image." >> release-notes.md
          echo "" >> release-notes.md
          echo "> **Note:** This is a **pre-release version** and may contain experimental changes." >> release-notes.md
          echo "> It is **not recommended for production use** without thorough testing." >> release-notes.md
          echo "" >> release-notes.md
          echo "**More information about available tags can be found on the [Docker Hub page](https://hub.docker.com/r/buanet/docker.coturn/tags).**" >> release-notes.md

          # Create the GitHub pre-release
          gh release create "${{ env.new_tag }}" --prerelease --notes-file release-notes.md
          echo "[LOG] GitHub pre-release created: ${{ env.new_tag }}"
        env:
          GH_TOKEN: ${{ secrets.ACTIONS_PAT }}
